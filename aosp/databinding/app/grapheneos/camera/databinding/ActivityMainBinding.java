// Generated by view binder compiler. Do not edit!
package app.grapheneos.camera.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.camera.view.PreviewView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import app.grapheneos.camera.R;
import app.grapheneos.camera.ui.BottomTabLayout;
import app.grapheneos.camera.ui.CountDownTimerUI;
import app.grapheneos.camera.ui.CustomGrid;
import app.grapheneos.camera.ui.QROverlay;
import app.grapheneos.camera.ui.QRToggle;
import app.grapheneos.camera.ui.seekbar.ExposureBar;
import app.grapheneos.camera.ui.seekbar.ZoomBar;
import com.google.android.material.imageview.ShapeableImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final QRToggle aztecToggle;

  @NonNull
  public final CountDownTimerUI cTimer;

  @NonNull
  public final BottomTabLayout cameraModeTabs;

  @NonNull
  public final ImageView cancelButton;

  @NonNull
  public final ImageButton captureButton;

  @NonNull
  public final ImageView captureButtonCross;

  @NonNull
  public final TextView captureButtonText;

  @NonNull
  public final ImageButton confirmButton;

  @NonNull
  public final QRToggle dataMatrixToggle;

  @NonNull
  public final ExposureBar exposureBar;

  @NonNull
  public final LinearLayout exposureBarPanel;

  @NonNull
  public final ImageView exposureNegIcon;

  @NonNull
  public final ImageView exposurePlusIcon;

  @NonNull
  public final FrameLayout flipCameraCircle;

  @NonNull
  public final ImageView flipCameraIcon;

  @NonNull
  public final ImageView flipCameraIconContent;

  @NonNull
  public final ImageView focusRing;

  @NonNull
  public final LinearLayout gCircle;

  @NonNull
  public final FrameLayout gCircleFrame;

  @NonNull
  public final View gCircleLeftDash;

  @NonNull
  public final View gCircleLineX;

  @NonNull
  public final View gCircleLineZ;

  @NonNull
  public final View gCircleRightDash;

  @NonNull
  public final TextView gCircleText;

  @NonNull
  public final ShapeableImageView imagePreview;

  @NonNull
  public final FrameLayout mainFrame;

  @NonNull
  public final ImageView mainOverlay;

  @NonNull
  public final ImageView micOff;

  @NonNull
  public final ImageView moreOptions;

  @NonNull
  public final QRToggle pdf417Toggle;

  @NonNull
  public final ImageView playPreview;

  @NonNull
  public final PreviewView preview;

  @NonNull
  public final ConstraintLayout previewContainer;

  @NonNull
  public final CustomGrid previewGrid;

  @NonNull
  public final ProgressBar previewLoading;

  @NonNull
  public final QROverlay qrOverlay;

  @NonNull
  public final QRToggle qrScanToggle;

  @NonNull
  public final LinearLayout qrScanToggles;

  @NonNull
  public final ImageView retakeIcon;

  @NonNull
  public final RelativeLayout root;

  @NonNull
  public final ImageButton settingsOption;

  @NonNull
  public final ImageView thirdCircle;

  @NonNull
  public final FrameLayout thirdOption;

  @NonNull
  public final LinearLayout threeButtons;

  @NonNull
  public final TextView timer;

  @NonNull
  public final ImageView whiteOptionCircle;

  @NonNull
  public final ZoomBar zoomBar;

  @NonNull
  public final LinearLayout zoomBarPanel;

  @NonNull
  public final ImageView zoomInIcon;

  @NonNull
  public final ImageView zoomOutIcon;

  private ActivityMainBinding(@NonNull CoordinatorLayout rootView, @NonNull QRToggle aztecToggle,
      @NonNull CountDownTimerUI cTimer, @NonNull BottomTabLayout cameraModeTabs,
      @NonNull ImageView cancelButton, @NonNull ImageButton captureButton,
      @NonNull ImageView captureButtonCross, @NonNull TextView captureButtonText,
      @NonNull ImageButton confirmButton, @NonNull QRToggle dataMatrixToggle,
      @NonNull ExposureBar exposureBar, @NonNull LinearLayout exposureBarPanel,
      @NonNull ImageView exposureNegIcon, @NonNull ImageView exposurePlusIcon,
      @NonNull FrameLayout flipCameraCircle, @NonNull ImageView flipCameraIcon,
      @NonNull ImageView flipCameraIconContent, @NonNull ImageView focusRing,
      @NonNull LinearLayout gCircle, @NonNull FrameLayout gCircleFrame,
      @NonNull View gCircleLeftDash, @NonNull View gCircleLineX, @NonNull View gCircleLineZ,
      @NonNull View gCircleRightDash, @NonNull TextView gCircleText,
      @NonNull ShapeableImageView imagePreview, @NonNull FrameLayout mainFrame,
      @NonNull ImageView mainOverlay, @NonNull ImageView micOff, @NonNull ImageView moreOptions,
      @NonNull QRToggle pdf417Toggle, @NonNull ImageView playPreview, @NonNull PreviewView preview,
      @NonNull ConstraintLayout previewContainer, @NonNull CustomGrid previewGrid,
      @NonNull ProgressBar previewLoading, @NonNull QROverlay qrOverlay,
      @NonNull QRToggle qrScanToggle, @NonNull LinearLayout qrScanToggles,
      @NonNull ImageView retakeIcon, @NonNull RelativeLayout root,
      @NonNull ImageButton settingsOption, @NonNull ImageView thirdCircle,
      @NonNull FrameLayout thirdOption, @NonNull LinearLayout threeButtons, @NonNull TextView timer,
      @NonNull ImageView whiteOptionCircle, @NonNull ZoomBar zoomBar,
      @NonNull LinearLayout zoomBarPanel, @NonNull ImageView zoomInIcon,
      @NonNull ImageView zoomOutIcon) {
    this.rootView = rootView;
    this.aztecToggle = aztecToggle;
    this.cTimer = cTimer;
    this.cameraModeTabs = cameraModeTabs;
    this.cancelButton = cancelButton;
    this.captureButton = captureButton;
    this.captureButtonCross = captureButtonCross;
    this.captureButtonText = captureButtonText;
    this.confirmButton = confirmButton;
    this.dataMatrixToggle = dataMatrixToggle;
    this.exposureBar = exposureBar;
    this.exposureBarPanel = exposureBarPanel;
    this.exposureNegIcon = exposureNegIcon;
    this.exposurePlusIcon = exposurePlusIcon;
    this.flipCameraCircle = flipCameraCircle;
    this.flipCameraIcon = flipCameraIcon;
    this.flipCameraIconContent = flipCameraIconContent;
    this.focusRing = focusRing;
    this.gCircle = gCircle;
    this.gCircleFrame = gCircleFrame;
    this.gCircleLeftDash = gCircleLeftDash;
    this.gCircleLineX = gCircleLineX;
    this.gCircleLineZ = gCircleLineZ;
    this.gCircleRightDash = gCircleRightDash;
    this.gCircleText = gCircleText;
    this.imagePreview = imagePreview;
    this.mainFrame = mainFrame;
    this.mainOverlay = mainOverlay;
    this.micOff = micOff;
    this.moreOptions = moreOptions;
    this.pdf417Toggle = pdf417Toggle;
    this.playPreview = playPreview;
    this.preview = preview;
    this.previewContainer = previewContainer;
    this.previewGrid = previewGrid;
    this.previewLoading = previewLoading;
    this.qrOverlay = qrOverlay;
    this.qrScanToggle = qrScanToggle;
    this.qrScanToggles = qrScanToggles;
    this.retakeIcon = retakeIcon;
    this.root = root;
    this.settingsOption = settingsOption;
    this.thirdCircle = thirdCircle;
    this.thirdOption = thirdOption;
    this.threeButtons = threeButtons;
    this.timer = timer;
    this.whiteOptionCircle = whiteOptionCircle;
    this.zoomBar = zoomBar;
    this.zoomBarPanel = zoomBarPanel;
    this.zoomInIcon = zoomInIcon;
    this.zoomOutIcon = zoomOutIcon;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.aztec_toggle;
      QRToggle aztecToggle = ViewBindings.findChildViewById(rootView, id);
      if (aztecToggle == null) {
        break missingId;
      }

      id = R.id.c_timer;
      CountDownTimerUI cTimer = ViewBindings.findChildViewById(rootView, id);
      if (cTimer == null) {
        break missingId;
      }

      id = R.id.camera_mode_tabs;
      BottomTabLayout cameraModeTabs = ViewBindings.findChildViewById(rootView, id);
      if (cameraModeTabs == null) {
        break missingId;
      }

      id = R.id.cancel_button;
      ImageView cancelButton = ViewBindings.findChildViewById(rootView, id);
      if (cancelButton == null) {
        break missingId;
      }

      id = R.id.capture_button;
      ImageButton captureButton = ViewBindings.findChildViewById(rootView, id);
      if (captureButton == null) {
        break missingId;
      }

      id = R.id.capture_button_cross;
      ImageView captureButtonCross = ViewBindings.findChildViewById(rootView, id);
      if (captureButtonCross == null) {
        break missingId;
      }

      id = R.id.capture_button_text;
      TextView captureButtonText = ViewBindings.findChildViewById(rootView, id);
      if (captureButtonText == null) {
        break missingId;
      }

      id = R.id.confirm_button;
      ImageButton confirmButton = ViewBindings.findChildViewById(rootView, id);
      if (confirmButton == null) {
        break missingId;
      }

      id = R.id.data_matrix_toggle;
      QRToggle dataMatrixToggle = ViewBindings.findChildViewById(rootView, id);
      if (dataMatrixToggle == null) {
        break missingId;
      }

      id = R.id.exposure_bar;
      ExposureBar exposureBar = ViewBindings.findChildViewById(rootView, id);
      if (exposureBar == null) {
        break missingId;
      }

      id = R.id.exposure_bar_panel;
      LinearLayout exposureBarPanel = ViewBindings.findChildViewById(rootView, id);
      if (exposureBarPanel == null) {
        break missingId;
      }

      id = R.id.exposure_neg_icon;
      ImageView exposureNegIcon = ViewBindings.findChildViewById(rootView, id);
      if (exposureNegIcon == null) {
        break missingId;
      }

      id = R.id.exposure_plus_icon;
      ImageView exposurePlusIcon = ViewBindings.findChildViewById(rootView, id);
      if (exposurePlusIcon == null) {
        break missingId;
      }

      id = R.id.flip_camera_circle;
      FrameLayout flipCameraCircle = ViewBindings.findChildViewById(rootView, id);
      if (flipCameraCircle == null) {
        break missingId;
      }

      id = R.id.flip_camera_icon;
      ImageView flipCameraIcon = ViewBindings.findChildViewById(rootView, id);
      if (flipCameraIcon == null) {
        break missingId;
      }

      id = R.id.flip_camera_icon_content;
      ImageView flipCameraIconContent = ViewBindings.findChildViewById(rootView, id);
      if (flipCameraIconContent == null) {
        break missingId;
      }

      id = R.id.focusRing;
      ImageView focusRing = ViewBindings.findChildViewById(rootView, id);
      if (focusRing == null) {
        break missingId;
      }

      id = R.id.g_circle;
      LinearLayout gCircle = ViewBindings.findChildViewById(rootView, id);
      if (gCircle == null) {
        break missingId;
      }

      id = R.id.g_circle_frame;
      FrameLayout gCircleFrame = ViewBindings.findChildViewById(rootView, id);
      if (gCircleFrame == null) {
        break missingId;
      }

      id = R.id.g_circle_left_dash;
      View gCircleLeftDash = ViewBindings.findChildViewById(rootView, id);
      if (gCircleLeftDash == null) {
        break missingId;
      }

      id = R.id.g_circle_line_x;
      View gCircleLineX = ViewBindings.findChildViewById(rootView, id);
      if (gCircleLineX == null) {
        break missingId;
      }

      id = R.id.g_circle_line_z;
      View gCircleLineZ = ViewBindings.findChildViewById(rootView, id);
      if (gCircleLineZ == null) {
        break missingId;
      }

      id = R.id.g_circle_right_dash;
      View gCircleRightDash = ViewBindings.findChildViewById(rootView, id);
      if (gCircleRightDash == null) {
        break missingId;
      }

      id = R.id.g_circle_text;
      TextView gCircleText = ViewBindings.findChildViewById(rootView, id);
      if (gCircleText == null) {
        break missingId;
      }

      id = R.id.image_preview;
      ShapeableImageView imagePreview = ViewBindings.findChildViewById(rootView, id);
      if (imagePreview == null) {
        break missingId;
      }

      id = R.id.main_frame;
      FrameLayout mainFrame = ViewBindings.findChildViewById(rootView, id);
      if (mainFrame == null) {
        break missingId;
      }

      id = R.id.main_overlay;
      ImageView mainOverlay = ViewBindings.findChildViewById(rootView, id);
      if (mainOverlay == null) {
        break missingId;
      }

      id = R.id.mic_off;
      ImageView micOff = ViewBindings.findChildViewById(rootView, id);
      if (micOff == null) {
        break missingId;
      }

      id = R.id.more_options;
      ImageView moreOptions = ViewBindings.findChildViewById(rootView, id);
      if (moreOptions == null) {
        break missingId;
      }

      id = R.id.pdf417_toggle;
      QRToggle pdf417Toggle = ViewBindings.findChildViewById(rootView, id);
      if (pdf417Toggle == null) {
        break missingId;
      }

      id = R.id.play_preview;
      ImageView playPreview = ViewBindings.findChildViewById(rootView, id);
      if (playPreview == null) {
        break missingId;
      }

      id = R.id.preview;
      PreviewView preview = ViewBindings.findChildViewById(rootView, id);
      if (preview == null) {
        break missingId;
      }

      id = R.id.preview_container;
      ConstraintLayout previewContainer = ViewBindings.findChildViewById(rootView, id);
      if (previewContainer == null) {
        break missingId;
      }

      id = R.id.preview_grid;
      CustomGrid previewGrid = ViewBindings.findChildViewById(rootView, id);
      if (previewGrid == null) {
        break missingId;
      }

      id = R.id.preview_loading;
      ProgressBar previewLoading = ViewBindings.findChildViewById(rootView, id);
      if (previewLoading == null) {
        break missingId;
      }

      id = R.id.qr_overlay;
      QROverlay qrOverlay = ViewBindings.findChildViewById(rootView, id);
      if (qrOverlay == null) {
        break missingId;
      }

      id = R.id.qr_scan_toggle;
      QRToggle qrScanToggle = ViewBindings.findChildViewById(rootView, id);
      if (qrScanToggle == null) {
        break missingId;
      }

      id = R.id.qr_scan_toggles;
      LinearLayout qrScanToggles = ViewBindings.findChildViewById(rootView, id);
      if (qrScanToggles == null) {
        break missingId;
      }

      id = R.id.retake_icon;
      ImageView retakeIcon = ViewBindings.findChildViewById(rootView, id);
      if (retakeIcon == null) {
        break missingId;
      }

      id = R.id.root;
      RelativeLayout root = ViewBindings.findChildViewById(rootView, id);
      if (root == null) {
        break missingId;
      }

      id = R.id.settings_option;
      ImageButton settingsOption = ViewBindings.findChildViewById(rootView, id);
      if (settingsOption == null) {
        break missingId;
      }

      id = R.id.third_circle;
      ImageView thirdCircle = ViewBindings.findChildViewById(rootView, id);
      if (thirdCircle == null) {
        break missingId;
      }

      id = R.id.third_option;
      FrameLayout thirdOption = ViewBindings.findChildViewById(rootView, id);
      if (thirdOption == null) {
        break missingId;
      }

      id = R.id.three_buttons;
      LinearLayout threeButtons = ViewBindings.findChildViewById(rootView, id);
      if (threeButtons == null) {
        break missingId;
      }

      id = R.id.timer;
      TextView timer = ViewBindings.findChildViewById(rootView, id);
      if (timer == null) {
        break missingId;
      }

      id = R.id.white_option_circle;
      ImageView whiteOptionCircle = ViewBindings.findChildViewById(rootView, id);
      if (whiteOptionCircle == null) {
        break missingId;
      }

      id = R.id.zoom_bar;
      ZoomBar zoomBar = ViewBindings.findChildViewById(rootView, id);
      if (zoomBar == null) {
        break missingId;
      }

      id = R.id.zoom_bar_panel;
      LinearLayout zoomBarPanel = ViewBindings.findChildViewById(rootView, id);
      if (zoomBarPanel == null) {
        break missingId;
      }

      id = R.id.zoom_in_icon;
      ImageView zoomInIcon = ViewBindings.findChildViewById(rootView, id);
      if (zoomInIcon == null) {
        break missingId;
      }

      id = R.id.zoom_out_icon;
      ImageView zoomOutIcon = ViewBindings.findChildViewById(rootView, id);
      if (zoomOutIcon == null) {
        break missingId;
      }

      return new ActivityMainBinding((CoordinatorLayout) rootView, aztecToggle, cTimer,
          cameraModeTabs, cancelButton, captureButton, captureButtonCross, captureButtonText,
          confirmButton, dataMatrixToggle, exposureBar, exposureBarPanel, exposureNegIcon,
          exposurePlusIcon, flipCameraCircle, flipCameraIcon, flipCameraIconContent, focusRing,
          gCircle, gCircleFrame, gCircleLeftDash, gCircleLineX, gCircleLineZ, gCircleRightDash,
          gCircleText, imagePreview, mainFrame, mainOverlay, micOff, moreOptions, pdf417Toggle,
          playPreview, preview, previewContainer, previewGrid, previewLoading, qrOverlay,
          qrScanToggle, qrScanToggles, retakeIcon, root, settingsOption, thirdCircle, thirdOption,
          threeButtons, timer, whiteOptionCircle, zoomBar, zoomBarPanel, zoomInIcon, zoomOutIcon);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
