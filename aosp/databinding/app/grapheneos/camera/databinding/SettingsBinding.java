// Generated by view binder compiler. Do not edit!
package app.grapheneos.camera.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.ToggleButton;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import app.grapheneos.camera.R;
import app.grapheneos.camera.ui.SettingsFrameLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SettingsBinding implements ViewBinding {
  @NonNull
  private final SettingsFrameLayout rootView;

  @NonNull
  public final ToggleButton aspectRatioToggle;

  @NonNull
  public final View background;

  @NonNull
  public final RadioGroup cmRadioGroup;

  @NonNull
  public final LinearLayout enableEisSetting;

  @NonNull
  public final SwitchCompat enableEisSwitch;

  @NonNull
  public final ImageView flashToggleOption;

  @NonNull
  public final Spinner focusTimeoutSpinner;

  @NonNull
  public final ImageView gridToggleOption;

  @NonNull
  public final LinearLayout includeAudioSetting;

  @NonNull
  public final SwitchCompat includeAudioSwitch;

  @NonNull
  public final RadioButton latencyRadio;

  @NonNull
  public final ToggleButton locationToggle;

  @NonNull
  public final TextView moreSettings;

  @NonNull
  public final RadioButton qualityRadio;

  @NonNull
  public final SettingsFrameLayout root;

  @NonNull
  public final LinearLayout selfIlluminationSetting;

  @NonNull
  public final SwitchCompat selfIlluminationSwitch;

  @NonNull
  public final LinearLayout settingsDialog;

  @NonNull
  public final RelativeLayout settingsFrame;

  @NonNull
  public final ScrollView settingsScrollview;

  @NonNull
  public final LinearLayout settingsScrollviewContent;

  @NonNull
  public final LinearLayout timerSetting;

  @NonNull
  public final Spinner timerSpinner;

  @NonNull
  public final ToggleButton torchToggleOption;

  @NonNull
  public final LinearLayout videoQualitySetting;

  @NonNull
  public final Spinner videoQualitySpinner;

  private SettingsBinding(@NonNull SettingsFrameLayout rootView,
      @NonNull ToggleButton aspectRatioToggle, @NonNull View background,
      @NonNull RadioGroup cmRadioGroup, @NonNull LinearLayout enableEisSetting,
      @NonNull SwitchCompat enableEisSwitch, @NonNull ImageView flashToggleOption,
      @NonNull Spinner focusTimeoutSpinner, @NonNull ImageView gridToggleOption,
      @NonNull LinearLayout includeAudioSetting, @NonNull SwitchCompat includeAudioSwitch,
      @NonNull RadioButton latencyRadio, @NonNull ToggleButton locationToggle,
      @NonNull TextView moreSettings, @NonNull RadioButton qualityRadio,
      @NonNull SettingsFrameLayout root, @NonNull LinearLayout selfIlluminationSetting,
      @NonNull SwitchCompat selfIlluminationSwitch, @NonNull LinearLayout settingsDialog,
      @NonNull RelativeLayout settingsFrame, @NonNull ScrollView settingsScrollview,
      @NonNull LinearLayout settingsScrollviewContent, @NonNull LinearLayout timerSetting,
      @NonNull Spinner timerSpinner, @NonNull ToggleButton torchToggleOption,
      @NonNull LinearLayout videoQualitySetting, @NonNull Spinner videoQualitySpinner) {
    this.rootView = rootView;
    this.aspectRatioToggle = aspectRatioToggle;
    this.background = background;
    this.cmRadioGroup = cmRadioGroup;
    this.enableEisSetting = enableEisSetting;
    this.enableEisSwitch = enableEisSwitch;
    this.flashToggleOption = flashToggleOption;
    this.focusTimeoutSpinner = focusTimeoutSpinner;
    this.gridToggleOption = gridToggleOption;
    this.includeAudioSetting = includeAudioSetting;
    this.includeAudioSwitch = includeAudioSwitch;
    this.latencyRadio = latencyRadio;
    this.locationToggle = locationToggle;
    this.moreSettings = moreSettings;
    this.qualityRadio = qualityRadio;
    this.root = root;
    this.selfIlluminationSetting = selfIlluminationSetting;
    this.selfIlluminationSwitch = selfIlluminationSwitch;
    this.settingsDialog = settingsDialog;
    this.settingsFrame = settingsFrame;
    this.settingsScrollview = settingsScrollview;
    this.settingsScrollviewContent = settingsScrollviewContent;
    this.timerSetting = timerSetting;
    this.timerSpinner = timerSpinner;
    this.torchToggleOption = torchToggleOption;
    this.videoQualitySetting = videoQualitySetting;
    this.videoQualitySpinner = videoQualitySpinner;
  }

  @Override
  @NonNull
  public SettingsFrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.aspect_ratio_toggle;
      ToggleButton aspectRatioToggle = ViewBindings.findChildViewById(rootView, id);
      if (aspectRatioToggle == null) {
        break missingId;
      }

      id = R.id.background;
      View background = ViewBindings.findChildViewById(rootView, id);
      if (background == null) {
        break missingId;
      }

      id = R.id.cm_radio_group;
      RadioGroup cmRadioGroup = ViewBindings.findChildViewById(rootView, id);
      if (cmRadioGroup == null) {
        break missingId;
      }

      id = R.id.enable_eis_setting;
      LinearLayout enableEisSetting = ViewBindings.findChildViewById(rootView, id);
      if (enableEisSetting == null) {
        break missingId;
      }

      id = R.id.enable_eis_switch;
      SwitchCompat enableEisSwitch = ViewBindings.findChildViewById(rootView, id);
      if (enableEisSwitch == null) {
        break missingId;
      }

      id = R.id.flash_toggle_option;
      ImageView flashToggleOption = ViewBindings.findChildViewById(rootView, id);
      if (flashToggleOption == null) {
        break missingId;
      }

      id = R.id.focus_timeout_spinner;
      Spinner focusTimeoutSpinner = ViewBindings.findChildViewById(rootView, id);
      if (focusTimeoutSpinner == null) {
        break missingId;
      }

      id = R.id.grid_toggle_option;
      ImageView gridToggleOption = ViewBindings.findChildViewById(rootView, id);
      if (gridToggleOption == null) {
        break missingId;
      }

      id = R.id.include_audio_setting;
      LinearLayout includeAudioSetting = ViewBindings.findChildViewById(rootView, id);
      if (includeAudioSetting == null) {
        break missingId;
      }

      id = R.id.include_audio_switch;
      SwitchCompat includeAudioSwitch = ViewBindings.findChildViewById(rootView, id);
      if (includeAudioSwitch == null) {
        break missingId;
      }

      id = R.id.latency_radio;
      RadioButton latencyRadio = ViewBindings.findChildViewById(rootView, id);
      if (latencyRadio == null) {
        break missingId;
      }

      id = R.id.location_toggle;
      ToggleButton locationToggle = ViewBindings.findChildViewById(rootView, id);
      if (locationToggle == null) {
        break missingId;
      }

      id = R.id.more_settings;
      TextView moreSettings = ViewBindings.findChildViewById(rootView, id);
      if (moreSettings == null) {
        break missingId;
      }

      id = R.id.quality_radio;
      RadioButton qualityRadio = ViewBindings.findChildViewById(rootView, id);
      if (qualityRadio == null) {
        break missingId;
      }

      SettingsFrameLayout root = (SettingsFrameLayout) rootView;

      id = R.id.self_illumination_setting;
      LinearLayout selfIlluminationSetting = ViewBindings.findChildViewById(rootView, id);
      if (selfIlluminationSetting == null) {
        break missingId;
      }

      id = R.id.self_illumination_switch;
      SwitchCompat selfIlluminationSwitch = ViewBindings.findChildViewById(rootView, id);
      if (selfIlluminationSwitch == null) {
        break missingId;
      }

      id = R.id.settings_dialog;
      LinearLayout settingsDialog = ViewBindings.findChildViewById(rootView, id);
      if (settingsDialog == null) {
        break missingId;
      }

      id = R.id.settings_frame;
      RelativeLayout settingsFrame = ViewBindings.findChildViewById(rootView, id);
      if (settingsFrame == null) {
        break missingId;
      }

      id = R.id.settings_scrollview;
      ScrollView settingsScrollview = ViewBindings.findChildViewById(rootView, id);
      if (settingsScrollview == null) {
        break missingId;
      }

      id = R.id.settings_scrollview_content;
      LinearLayout settingsScrollviewContent = ViewBindings.findChildViewById(rootView, id);
      if (settingsScrollviewContent == null) {
        break missingId;
      }

      id = R.id.timer_setting;
      LinearLayout timerSetting = ViewBindings.findChildViewById(rootView, id);
      if (timerSetting == null) {
        break missingId;
      }

      id = R.id.timer_spinner;
      Spinner timerSpinner = ViewBindings.findChildViewById(rootView, id);
      if (timerSpinner == null) {
        break missingId;
      }

      id = R.id.torch_toggle_option;
      ToggleButton torchToggleOption = ViewBindings.findChildViewById(rootView, id);
      if (torchToggleOption == null) {
        break missingId;
      }

      id = R.id.video_quality_setting;
      LinearLayout videoQualitySetting = ViewBindings.findChildViewById(rootView, id);
      if (videoQualitySetting == null) {
        break missingId;
      }

      id = R.id.video_quality_spinner;
      Spinner videoQualitySpinner = ViewBindings.findChildViewById(rootView, id);
      if (videoQualitySpinner == null) {
        break missingId;
      }

      return new SettingsBinding((SettingsFrameLayout) rootView, aspectRatioToggle, background,
          cmRadioGroup, enableEisSetting, enableEisSwitch, flashToggleOption, focusTimeoutSpinner,
          gridToggleOption, includeAudioSetting, includeAudioSwitch, latencyRadio, locationToggle,
          moreSettings, qualityRadio, root, selfIlluminationSetting, selfIlluminationSwitch,
          settingsDialog, settingsFrame, settingsScrollview, settingsScrollviewContent,
          timerSetting, timerSpinner, torchToggleOption, videoQualitySetting, videoQualitySpinner);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
